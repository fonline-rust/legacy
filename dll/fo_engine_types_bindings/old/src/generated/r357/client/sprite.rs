/* automatically generated by rust-bindgen */

#[allow(unused_imports)] use super::*;


#[repr(C)]
pub struct SpriteInfo {
    pub Surface: *const ::std::os::raw::c_void,
    pub SurfaceUV: [f32; 4usize],
    pub Width: uint16,
    pub Height: uint16,
    pub OffsX: int16,
    pub OffsY: int16,
    pub Effect: *const ::std::os::raw::c_void,
    pub Anim3d: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SpriteInfo() {
    assert_eq!(
        ::std::mem::size_of::<SpriteInfo>(),
        36usize,
        concat!("Size of: ", stringify!(SpriteInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SpriteInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(SpriteInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Surface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Surface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).SurfaceUV as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(SurfaceUV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Height as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).OffsX as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(OffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).OffsY as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(OffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Effect as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Effect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Anim3d as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Anim3d)
        )
    );
}
#[repr(C)]
pub struct Sprite {
    pub DrawOrderType: ::std::os::raw::c_int,
    pub DrawOrderPos: uint,
    pub TreeIndex: uint,
    pub SprId: uint,
    pub PSprId: *const uint,
    pub HexX: ::std::os::raw::c_int,
    pub HexY: ::std::os::raw::c_int,
    pub ScrX: ::std::os::raw::c_int,
    pub ScrY: ::std::os::raw::c_int,
    pub OffsX: *const int16,
    pub OffsY: *const int16,
    pub CutType: ::std::os::raw::c_int,
    pub Parent: *const Sprite,
    pub Child: *const Sprite,
    pub CutX: f32,
    pub CutW: f32,
    pub CutTexL: f32,
    pub CutTexR: f32,
    pub Alpha: *const uint8,
    pub Light: *const uint8,
    pub EggType: ::std::os::raw::c_int,
    pub ContourType: ::std::os::raw::c_int,
    pub ContourColor: uint,
    pub Color: uint,
    pub FlashMask: uint,
    pub ValidCallback: *const bool,
    pub Valid: bool,
}
#[test]
fn bindgen_test_layout_Sprite() {
    assert_eq!(
        ::std::mem::size_of::<Sprite>(),
        108usize,
        concat!("Size of: ", stringify!(Sprite))
    );
    assert_eq!(
        ::std::mem::align_of::<Sprite>(),
        4usize,
        concat!("Alignment of ", stringify!(Sprite))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).DrawOrderType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(DrawOrderType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).DrawOrderPos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(DrawOrderPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).TreeIndex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(TreeIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).SprId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(SprId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).PSprId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(PSprId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).HexX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).HexY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ScrX as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ScrX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ScrY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ScrY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).OffsX as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(OffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).OffsY as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(OffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutType as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Parent as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Child as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutX as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutW as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutTexL as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutTexL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutTexR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutTexR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Alpha as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Light as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Light)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).EggType as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(EggType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ContourType as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ContourType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ContourColor as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ContourColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Color as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).FlashMask as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(FlashMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ValidCallback as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ValidCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Valid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Valid)
        )
    );
}
