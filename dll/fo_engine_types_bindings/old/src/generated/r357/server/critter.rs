/* automatically generated by rust-bindgen */

#[allow(unused_imports)] use super::*;


#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
pub struct NpcPlane {
    pub Type: ::std::os::raw::c_int,
    pub Priority: uint,
    pub Identifier: ::std::os::raw::c_int,
    pub IdentifierExt: uint,
    pub ChildPlane: *const NpcPlane,
    pub IsMove: bool,
    pub __bindgen_anon_1: NpcPlane__bindgen_ty_1,
    pub Move: NpcPlane__bindgen_ty_2,
    pub Assigned: bool,
    pub RefCounter: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1 {
    pub Misc: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_1>,
    pub Attack: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_2>,
    pub Walk: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_3>,
    pub Pick: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_4>,
    pub Buffer: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_5>,
    pub bindgen_union_field: [u32; 8usize],
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_1 {
    pub IsRun: bool,
    pub WaitSecond: uint,
    pub ScriptBindId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).WaitSecond as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(WaitSecond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).ScriptBindId
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ScriptBindId)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_2 {
    pub IsRun: bool,
    pub TargId: uint,
    pub MinHp: ::std::os::raw::c_int,
    pub IsGag: bool,
    pub GagHexX: uint16,
    pub GagHexY: uint16,
    pub LastHexX: uint16,
    pub LastHexY: uint16,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).TargId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(TargId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).MinHp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(MinHp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).IsGag as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(IsGag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).GagHexX as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(GagHexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).GagHexY as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(GagHexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).LastHexX as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LastHexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).LastHexY as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LastHexY)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_3 {
    pub IsRun: bool,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Dir: uint8,
    pub Cut: uint,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_3>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).HexX as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).HexY as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).Dir as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).Cut as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Cut)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_4 {
    pub IsRun: bool,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Pid: uint16,
    pub UseItemId: uint,
    pub ToOpen: bool,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).HexX as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).HexY as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).Pid as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(Pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).UseItemId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(UseItemId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).ToOpen as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(ToOpen)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_5 {
    pub Buffer: [uint; 8usize],
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_5>())).Buffer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(Buffer)
        )
    );
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(NpcPlane__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Misc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Misc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Attack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Attack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Walk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Pick as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Pick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Buffer)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_2 {
    pub PathNum: uint,
    pub Iter: uint,
    pub IsRun: bool,
    pub TargId: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Cut: uint,
    pub Trace: uint,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_2>(),
        28usize,
        concat!("Size of: ", stringify!(NpcPlane__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).PathNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(PathNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Iter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).IsRun as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).TargId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(TargId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).HexX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).HexY as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Cut as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Cut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Trace as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Trace)
        )
    );
}
#[test]
fn bindgen_test_layout_NpcPlane() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane>(),
        92usize,
        concat!("Size of: ", stringify!(NpcPlane))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Priority as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Identifier as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).IdentifierExt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(IdentifierExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).ChildPlane as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(ChildPlane)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).IsMove as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(IsMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Move as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Move)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Assigned as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Assigned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).RefCounter as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(RefCounter)
        )
    );
}
#[repr(C)]
pub struct GlobalMapGroup {
    pub Group: CrVec,
    pub Rule: *const Critter,
    pub CarId: uint,
    pub CurX: f32,
    pub CurY: f32,
    pub ToX: f32,
    pub ToY: f32,
    pub Speed: f32,
    pub IsSetMove: bool,
    pub TimeCanFollow: uint,
    pub IsMultiply: bool,
    pub ProcessLastTick: uint,
    pub EncounterDescriptor: uint,
    pub EncounterTick: uint,
    pub EncounterForce: bool,
}
#[test]
fn bindgen_test_layout_GlobalMapGroup() {
    assert_eq!(
        ::std::mem::size_of::<GlobalMapGroup>(),
        68usize,
        concat!("Size of: ", stringify!(GlobalMapGroup))
    );
    assert_eq!(
        ::std::mem::align_of::<GlobalMapGroup>(),
        4usize,
        concat!("Alignment of ", stringify!(GlobalMapGroup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).Group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(Group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).Rule as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(Rule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).CarId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(CarId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).CurX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(CurX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).CurY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(CurY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).ToX as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(ToX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).ToY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(ToY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).Speed as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(Speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).IsSetMove as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(IsSetMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).TimeCanFollow as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(TimeCanFollow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).IsMultiply as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(IsMultiply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).ProcessLastTick as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(ProcessLastTick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GlobalMapGroup>())).EncounterDescriptor as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(EncounterDescriptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).EncounterTick as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(EncounterTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).EncounterForce as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(EncounterForce)
        )
    );
}
#[repr(C)]
pub struct CritterTimeEvent {
    pub FuncNum: uint,
    pub Rate: uint,
    pub NextTime: uint,
    pub Identifier: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CritterTimeEvent() {
    assert_eq!(
        ::std::mem::size_of::<CritterTimeEvent>(),
        16usize,
        concat!("Size of: ", stringify!(CritterTimeEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<CritterTimeEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(CritterTimeEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).FuncNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(FuncNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).Rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(Rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).NextTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(NextTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).Identifier as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(Identifier)
        )
    );
}
#[repr(C)]
pub struct Critter {
    pub Id: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub WorldX: uint16,
    pub WorldY: uint16,
    pub BaseType: uint,
    pub Dir: uint8,
    pub Cond: uint8,
    pub ReservedCE: uint8,
    pub Reserved0: uint8,
    pub ScriptId: uint,
    pub ShowCritterDist1: uint,
    pub ShowCritterDist2: uint,
    pub ShowCritterDist3: uint,
    pub Reserved00: uint16,
    pub Multihex: int16,
    pub GlobalGroupUid: uint,
    pub LastHexX: uint16,
    pub LastHexY: uint16,
    pub Reserved1: [uint; 4usize],
    pub MapId: uint,
    pub MapPid: uint16,
    pub Reserved2: uint16,
    pub Params: [::std::os::raw::c_int; 1000usize],
    pub Anim1Life: uint,
    pub Anim1Knockout: uint,
    pub Anim1Dead: uint,
    pub Anim2Life: uint,
    pub Anim2Knockout: uint,
    pub Anim2Dead: uint,
    pub Anim2KnockoutEnd: uint,
    pub Reserved3: [uint; 3usize],
    pub Lexems: [::std::os::raw::c_char; 128usize],
    pub Reserved4: [uint; 8usize],
    pub ClientToDelete: bool,
    pub Reserved5: uint8,
    pub Reserved6: uint16,
    pub Temp: uint,
    pub Reserved8: uint16,
    pub HoloInfoCount: uint16,
    pub HoloInfo: [uint; 250usize],
    pub Reserved9: [uint; 10usize],
    pub Scores: [::std::os::raw::c_int; 50usize],
    pub GlobalMapMoveCounter: uint,
    pub UserData: [uint8; 396usize],
    pub HomeMap: uint,
    pub HomeX: uint16,
    pub HomeY: uint16,
    pub HomeDir: uint8,
    pub Reserved11: uint8,
    pub ProtoId: uint16,
    pub Reserved12: uint,
    pub Reserved13: uint,
    pub Reserved14: uint,
    pub Reserved15: uint,
    pub IsDataExt: bool,
    pub Reserved16: uint8,
    pub Reserved17: uint16,
    pub Reserved18: [uint; 8usize],
    pub FavoriteItemPid: [uint16; 4usize],
    pub Reserved19: [uint; 10usize],
    pub EnemyStackCount: uint,
    pub EnemyStack: [uint; 30usize],
    pub Reserved20: [uint; 5usize],
    pub BagCurrentSet: [uint8; 20usize],
    pub BagRefreshTime: int16,
    pub Reserved21: uint8,
    pub BagSize: uint8,
    pub Bag: [Critter__bindgen_ty_1; 50usize],
    pub Reserved22: [uint; 100usize],
    pub DataExt: *mut Critter__bindgen_ty_2,
    pub Sync: SyncObj,
    pub CritterIsNpc: bool,
    pub Flags: uint,
    pub NameStr: ScriptString,
    pub GMapFog: Critter__bindgen_ty_3,
    pub IsRuning: bool,
    pub PrevHexTick: uint,
    pub PrevHexX: uint16,
    pub PrevHexY: uint16,
    pub LockMapTransfers: ::std::os::raw::c_int,
    pub ThisPtr: [*const Critter; 100usize],
    pub AllowedToDownloadMap: uint,
    pub ParamsIsChanged: [bool; 1000usize],
    pub ParamsChanged: IntVec,
    pub ParamLocked: ::std::os::raw::c_int,
    pub VisCr: CrVec,
    pub VisCrSelf: CrVec,
    pub VisCr1: UintSet,
    pub VisCr2: UintSet,
    pub VisCr3: UintSet,
    pub VisItem: UintSet,
    pub VisItemLocker: Spinlock,
    pub ViewMapId: uint,
    pub ViewMapPid: uint16,
    pub ViewMapLook: uint16,
    pub ViewMapHx: uint16,
    pub ViewMapHy: uint16,
    pub ViewMapDir: uint8,
    pub ViewMapLocId: uint,
    pub ViewMapLocEnt: uint,
    pub GroupSelf: *const GlobalMapGroup,
    pub GroupMove: *const GlobalMapGroup,
    pub InvItems: ItemVec,
    pub DefItemSlotHand: *const Item,
    pub DefItemSlotArmor: *const Item,
    pub ItemSlotMain: *const Item,
    pub ItemSlotExt: *const Item,
    pub ItemSlotArmor: *const Item,
    pub FuncId: [::std::os::raw::c_int; 44usize],
    pub KnockoutAp: uint,
    pub NextIntellectCachingTick: uint,
    pub IntellectCacheValue: uint16,
    pub LookCacheValue: uint,
    pub StartBreakTime: uint,
    pub BreakTime: uint,
    pub WaitEndTick: uint,
    pub DisableSend: ::std::os::raw::c_int,
    pub AccessContainerId: uint,
    pub ItemTransferCount: uint,
    pub TryingGoHomeTick: uint,
    pub CrTimeEvents: CritterTimeEventVec,
    pub GlobalIdleNextTick: uint,
    pub ApRegenerationTick: uint,
    pub IsNotValid: bool,
    pub RefCounter: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct Critter__bindgen_ty_1 {
    pub ItemPid: uint,
    pub MinCnt: uint,
    pub MaxCnt: uint,
    pub ItemSlot: uint,
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).ItemPid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(ItemPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).MinCnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(MinCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).MaxCnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(MaxCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).ItemSlot as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(ItemSlot)
        )
    );
}
#[repr(C)]
pub struct Critter__bindgen_ty_2 {
    pub Reserved23: [uint; 10usize],
    pub GlobalMapFog: [uint8; 2500usize],
    pub Reserved24: uint16,
    pub LocationsCount: uint16,
    pub LocationsId: [uint; 1000usize],
    pub Reserved25: [uint; 40usize],
    pub PlayIp: [uint; 20usize],
    pub PlayPort: [uint16; 20usize],
    pub CurrentIp: uint,
    pub Reserved26: [uint; 29usize],
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_2>(),
        6944usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved23 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).GlobalMapFog as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(GlobalMapFog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved24 as *const _ as usize
        },
        2540usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).LocationsCount as *const _ as usize
        },
        2542usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(LocationsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).LocationsId as *const _ as usize
        },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(LocationsId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved25 as *const _ as usize
        },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved25)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).PlayIp as *const _ as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(PlayIp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).PlayPort as *const _ as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(PlayPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).CurrentIp as *const _ as usize },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(CurrentIp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved26 as *const _ as usize
        },
        6828usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved26)
        )
    );
}
#[repr(C)]
pub struct Critter__bindgen_ty_3 {
    pub IsAlloc: bool,
    pub Data: *const uint8,
    pub Width: uint,
    pub Height: uint,
    pub WidthB: uint,
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_3>(),
        20usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).IsAlloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(IsAlloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).WidthB as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(WidthB)
        )
    );
}
#[test]
fn bindgen_test_layout_Critter() {
    assert_eq!(
        ::std::mem::size_of::<Critter>(),
        9344usize,
        concat!("Size of: ", stringify!(Critter))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).WorldX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(WorldX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).WorldY as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(WorldY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BaseType as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BaseType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Dir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Cond as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ReservedCE as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ReservedCE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved0 as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ScriptId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ScriptId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ShowCritterDist1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ShowCritterDist1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ShowCritterDist2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ShowCritterDist2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ShowCritterDist3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ShowCritterDist3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved00 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Multihex as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Multihex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GlobalGroupUid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GlobalGroupUid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LastHexX as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LastHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LastHexY as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LastHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).MapId as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(MapId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).MapPid as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(MapPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved2 as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Params as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim1Life as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim1Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim1Knockout as *const _ as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim1Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim1Dead as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim1Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2Life as *const _ as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2Knockout as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2Dead as *const _ as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2KnockoutEnd as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2KnockoutEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved3 as *const _ as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Lexems as *const _ as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Lexems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved4 as *const _ as usize },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ClientToDelete as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ClientToDelete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved5 as *const _ as usize },
        4273usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved6 as *const _ as usize },
        4274usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Temp as *const _ as usize },
        4276usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved8 as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HoloInfoCount as *const _ as usize },
        4282usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HoloInfoCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HoloInfo as *const _ as usize },
        4284usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HoloInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved9 as *const _ as usize },
        5284usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Scores as *const _ as usize },
        5324usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Scores)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GlobalMapMoveCounter as *const _ as usize },
        5524usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GlobalMapMoveCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).UserData as *const _ as usize },
        5528usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeMap as *const _ as usize },
        5924usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeX as *const _ as usize },
        5928usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeY as *const _ as usize },
        5930usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeDir as *const _ as usize },
        5932usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved11 as *const _ as usize },
        5933usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ProtoId as *const _ as usize },
        5934usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved12 as *const _ as usize },
        5936usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved13 as *const _ as usize },
        5940usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved14 as *const _ as usize },
        5944usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved15 as *const _ as usize },
        5948usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IsDataExt as *const _ as usize },
        5952usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IsDataExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved16 as *const _ as usize },
        5953usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved17 as *const _ as usize },
        5954usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved17)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved18 as *const _ as usize },
        5956usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved18)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).FavoriteItemPid as *const _ as usize },
        5988usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(FavoriteItemPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved19 as *const _ as usize },
        5996usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved19)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).EnemyStackCount as *const _ as usize },
        6036usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(EnemyStackCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).EnemyStack as *const _ as usize },
        6040usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(EnemyStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved20 as *const _ as usize },
        6160usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BagCurrentSet as *const _ as usize },
        6180usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BagCurrentSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BagRefreshTime as *const _ as usize },
        6200usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BagRefreshTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved21 as *const _ as usize },
        6202usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved21)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BagSize as *const _ as usize },
        6203usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BagSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Bag as *const _ as usize },
        6204usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Bag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved22 as *const _ as usize },
        7004usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved22)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DataExt as *const _ as usize },
        7404usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DataExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Sync as *const _ as usize },
        7408usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).CritterIsNpc as *const _ as usize },
        7412usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(CritterIsNpc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Flags as *const _ as usize },
        7416usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).NameStr as *const _ as usize },
        7420usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(NameStr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GMapFog as *const _ as usize },
        7452usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GMapFog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IsRuning as *const _ as usize },
        7472usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IsRuning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).PrevHexTick as *const _ as usize },
        7476usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(PrevHexTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).PrevHexX as *const _ as usize },
        7480usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(PrevHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).PrevHexY as *const _ as usize },
        7482usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(PrevHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LockMapTransfers as *const _ as usize },
        7484usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LockMapTransfers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ThisPtr as *const _ as usize },
        7488usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ThisPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).AllowedToDownloadMap as *const _ as usize },
        7888usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(AllowedToDownloadMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ParamsIsChanged as *const _ as usize },
        7892usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ParamsIsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ParamsChanged as *const _ as usize },
        8892usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ParamsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ParamLocked as *const _ as usize },
        8904usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ParamLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr as *const _ as usize },
        8908usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCrSelf as *const _ as usize },
        8920usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCrSelf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr1 as *const _ as usize },
        8932usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr2 as *const _ as usize },
        8956usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr3 as *const _ as usize },
        8980usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisItem as *const _ as usize },
        9004usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisItemLocker as *const _ as usize },
        9028usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisItemLocker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapId as *const _ as usize },
        9032usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapPid as *const _ as usize },
        9036usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapLook as *const _ as usize },
        9038usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapLook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapHx as *const _ as usize },
        9040usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapHx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapHy as *const _ as usize },
        9042usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapHy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapDir as *const _ as usize },
        9044usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapLocId as *const _ as usize },
        9048usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapLocId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapLocEnt as *const _ as usize },
        9052usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapLocEnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GroupSelf as *const _ as usize },
        9056usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GroupSelf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GroupMove as *const _ as usize },
        9060usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GroupMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).InvItems as *const _ as usize },
        9064usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(InvItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DefItemSlotHand as *const _ as usize },
        9076usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DefItemSlotHand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DefItemSlotArmor as *const _ as usize },
        9080usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DefItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemSlotMain as *const _ as usize },
        9084usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemSlotMain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemSlotExt as *const _ as usize },
        9088usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemSlotExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemSlotArmor as *const _ as usize },
        9092usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).FuncId as *const _ as usize },
        9096usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(FuncId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).KnockoutAp as *const _ as usize },
        9272usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(KnockoutAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter>())).NextIntellectCachingTick as *const _ as usize
        },
        9276usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(NextIntellectCachingTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IntellectCacheValue as *const _ as usize },
        9280usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IntellectCacheValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LookCacheValue as *const _ as usize },
        9284usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LookCacheValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).StartBreakTime as *const _ as usize },
        9288usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(StartBreakTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BreakTime as *const _ as usize },
        9292usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BreakTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).WaitEndTick as *const _ as usize },
        9296usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(WaitEndTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DisableSend as *const _ as usize },
        9300usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DisableSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).AccessContainerId as *const _ as usize },
        9304usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(AccessContainerId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemTransferCount as *const _ as usize },
        9308usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemTransferCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).TryingGoHomeTick as *const _ as usize },
        9312usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(TryingGoHomeTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).CrTimeEvents as *const _ as usize },
        9316usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(CrTimeEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GlobalIdleNextTick as *const _ as usize },
        9328usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GlobalIdleNextTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ApRegenerationTick as *const _ as usize },
        9332usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ApRegenerationTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IsNotValid as *const _ as usize },
        9336usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IsNotValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).RefCounter as *const _ as usize },
        9340usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(RefCounter)
        )
    );
}
#[repr(C)]
pub struct Client {
    pub _base: Critter,
    pub Name: [::std::os::raw::c_char; 31usize],
    pub PassHash: [::std::os::raw::c_char; 32usize],
    pub Access: uint8,
    pub LanguageMsg: uint,
}
#[test]
fn bindgen_test_layout_Client() {
    assert_eq!(
        ::std::mem::size_of::<Client>(),
        9412usize,
        concat!("Size of: ", stringify!(Client))
    );
    assert_eq!(
        ::std::mem::align_of::<Client>(),
        4usize,
        concat!("Alignment of ", stringify!(Client))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).Name as *const _ as usize },
        9344usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).PassHash as *const _ as usize },
        9375usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(PassHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).Access as *const _ as usize },
        9407usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(Access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).LanguageMsg as *const _ as usize },
        9408usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(LanguageMsg)
        )
    );
}
#[repr(C)]
pub struct Npc {
    pub _base: Critter,
    pub NextRefreshBagTick: uint,
    pub AiPlanes: NpcPlaneVec,
    pub Reserved: uint,
}
#[test]
fn bindgen_test_layout_Npc() {
    assert_eq!(
        ::std::mem::size_of::<Npc>(),
        9364usize,
        concat!("Size of: ", stringify!(Npc))
    );
    assert_eq!(
        ::std::mem::align_of::<Npc>(),
        4usize,
        concat!("Alignment of ", stringify!(Npc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Npc>())).NextRefreshBagTick as *const _ as usize },
        9344usize,
        concat!(
            "Offset of field: ",
            stringify!(Npc),
            "::",
            stringify!(NextRefreshBagTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Npc>())).AiPlanes as *const _ as usize },
        9348usize,
        concat!(
            "Offset of field: ",
            stringify!(Npc),
            "::",
            stringify!(AiPlanes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Npc>())).Reserved as *const _ as usize },
        9360usize,
        concat!(
            "Offset of field: ",
            stringify!(Npc),
            "::",
            stringify!(Reserved)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
pub struct CritterCl {
    pub _bindgen_opaque_blob: [u32; 1429usize],
}
#[test]
fn bindgen_test_layout_CritterCl() {
    assert_eq!(
        ::std::mem::size_of::<CritterCl>(),
        5716usize,
        concat!("Size of: ", stringify!(CritterCl))
    );
    assert_eq!(
        ::std::mem::align_of::<CritterCl>(),
        4usize,
        concat!("Alignment of ", stringify!(CritterCl))
    );
}
