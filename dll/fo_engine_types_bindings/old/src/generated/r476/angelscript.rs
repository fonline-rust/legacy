/* automatically generated by rust-bindgen */

#[allow(unused_imports)] use super::*;


pub type asBYTE = ::std::os::raw::c_uchar;
pub type asDWORD = ::std::os::raw::c_ulong;
#[repr(C)]
pub struct asIObjectType__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIObjectType {
    pub vtable_: *const asIObjectType__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIObjectType() {
    assert_eq!(
        ::std::mem::size_of::<asIObjectType>(),
        4usize,
        concat!("Size of: ", stringify!(asIObjectType))
    );
    assert_eq!(
        ::std::mem::align_of::<asIObjectType>(),
        4usize,
        concat!("Alignment of ", stringify!(asIObjectType))
    );
}
#[repr(C)]
pub struct ScriptString__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct ScriptString {
    pub vtable_: *const ScriptString__bindgen_vtable,
    pub buffer: std_string,
    pub refCount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ScriptString() {
    assert_eq!(
        ::std::mem::size_of::<ScriptString>(),
        36usize,
        concat!("Size of: ", stringify!(ScriptString))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptString>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptString>())).buffer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptString),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptString>())).refCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptString),
            "::",
            stringify!(refCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayBuffer {
    pub maxElements: asDWORD,
    pub numElements: asDWORD,
    pub data: [asBYTE; 1usize],
}
#[test]
fn bindgen_test_layout_ArrayBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ArrayBuffer>(),
        12usize,
        concat!("Size of: ", stringify!(ArrayBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayBuffer>(),
        4usize,
        concat!("Alignment of ", stringify!(ArrayBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuffer>())).maxElements as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuffer),
            "::",
            stringify!(maxElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuffer>())).numElements as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuffer),
            "::",
            stringify!(numElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuffer>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuffer),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
pub struct ScriptArray__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ScriptArray {
    pub vtable_: *const ScriptArray__bindgen_vtable,
    pub refCount: ::std::os::raw::c_int,
    pub gcFlag: bool,
    pub objType: *mut asIObjectType,
    pub buffer: *mut ArrayBuffer,
    pub elementSize: ::std::os::raw::c_int,
    pub subTypeId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ScriptArray() {
    assert_eq!(
        ::std::mem::size_of::<ScriptArray>(),
        28usize,
        concat!("Size of: ", stringify!(ScriptArray))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptArray>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).refCount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).gcFlag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(gcFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).objType as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(objType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).elementSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(elementSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).subTypeId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(subTypeId)
        )
    );
}
