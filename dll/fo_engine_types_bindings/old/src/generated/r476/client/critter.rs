/* automatically generated by rust-bindgen */

#[allow(unused_imports)] use super::*;


#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct NpcPlane {
    pub _bindgen_opaque_blob: [u32; 23usize],
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1 {
    pub Misc: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_1>,
    pub Attack: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_2>,
    pub Walk: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_3>,
    pub Pick: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_4>,
    pub Buffer: __BindgenUnionField<NpcPlane__bindgen_ty_1__bindgen_ty_5>,
    pub bindgen_union_field: [u32; 8usize],
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_1 {
    pub IsRun: bool,
    pub WaitSecond: uint,
    pub ScriptBindId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).WaitSecond as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(WaitSecond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).ScriptBindId
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ScriptBindId)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_2 {
    pub IsRun: bool,
    pub TargId: uint,
    pub MinHp: ::std::os::raw::c_int,
    pub IsGag: bool,
    pub GagHexX: uint16,
    pub GagHexY: uint16,
    pub LastHexX: uint16,
    pub LastHexY: uint16,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).TargId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(TargId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).MinHp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(MinHp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).IsGag as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(IsGag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).GagHexX as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(GagHexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).GagHexY as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(GagHexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).LastHexX as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LastHexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).LastHexY as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LastHexY)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_3 {
    pub IsRun: bool,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Dir: uint8,
    pub Cut: uint,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_3>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).HexX as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).HexY as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).Dir as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).Cut as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Cut)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_4 {
    pub IsRun: bool,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Pid: uint16,
    pub UseItemId: uint,
    pub ToOpen: bool,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).HexX as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).HexY as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).Pid as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(Pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).UseItemId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(UseItemId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).ToOpen as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(ToOpen)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_5 {
    pub Buffer: [uint; 8usize],
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_5>())).Buffer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(Buffer)
        )
    );
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(NpcPlane__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Misc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Misc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Attack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Attack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Walk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Pick as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Pick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Buffer)
        )
    );
}
#[repr(C)]
pub struct NpcPlane__bindgen_ty_2 {
    pub PathNum: uint,
    pub Iter: uint,
    pub IsRun: bool,
    pub TargId: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Cut: uint,
    pub Trace: uint,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_2>(),
        28usize,
        concat!("Size of: ", stringify!(NpcPlane__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).PathNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(PathNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Iter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).IsRun as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).TargId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(TargId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).HexX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).HexY as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Cut as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Cut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Trace as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Trace)
        )
    );
}
#[test]
fn bindgen_test_layout_NpcPlane() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane>(),
        92usize,
        concat!("Size of: ", stringify!(NpcPlane))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane))
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct GlobalMapGroup {
    pub _bindgen_opaque_blob: [u32; 18usize],
}
#[test]
fn bindgen_test_layout_GlobalMapGroup() {
    assert_eq!(
        ::std::mem::size_of::<GlobalMapGroup>(),
        72usize,
        concat!("Size of: ", stringify!(GlobalMapGroup))
    );
    assert_eq!(
        ::std::mem::align_of::<GlobalMapGroup>(),
        4usize,
        concat!("Alignment of ", stringify!(GlobalMapGroup))
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct CritterTimeEvent {
    pub _bindgen_opaque_blob: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_CritterTimeEvent() {
    assert_eq!(
        ::std::mem::size_of::<CritterTimeEvent>(),
        16usize,
        concat!("Size of: ", stringify!(CritterTimeEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<CritterTimeEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(CritterTimeEvent))
    );
}
#[repr(C)]
#[repr(align(4))]
pub struct Critter {
    pub _bindgen_opaque_blob: [u32; 2334usize],
}
#[repr(C)]
pub struct Critter__bindgen_ty_1 {
    pub ItemPid: uint,
    pub MinCnt: uint,
    pub MaxCnt: uint,
    pub ItemSlot: uint,
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).ItemPid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(ItemPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).MinCnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(MinCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).MaxCnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(MaxCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).ItemSlot as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(ItemSlot)
        )
    );
}
#[repr(C)]
pub struct Critter__bindgen_ty_2 {
    pub Reserved23: [uint; 10usize],
    pub GlobalMapFog: [uint8; 2500usize],
    pub Reserved24: uint16,
    pub LocationsCount: uint16,
    pub LocationsId: [uint; 1000usize],
    pub Reserved25: [uint; 40usize],
    pub PlayIp: [uint; 20usize],
    pub PlayPort: [uint16; 20usize],
    pub CurrentIp: uint,
    pub Reserved26: [uint; 29usize],
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_2>(),
        6944usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved23 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).GlobalMapFog as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(GlobalMapFog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved24 as *const _ as usize
        },
        2540usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).LocationsCount as *const _ as usize
        },
        2542usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(LocationsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).LocationsId as *const _ as usize
        },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(LocationsId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved25 as *const _ as usize
        },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved25)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).PlayIp as *const _ as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(PlayIp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).PlayPort as *const _ as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(PlayPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).CurrentIp as *const _ as usize },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(CurrentIp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved26 as *const _ as usize
        },
        6828usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved26)
        )
    );
}
#[repr(C)]
pub struct Critter__bindgen_ty_3 {
    pub IsAlloc: bool,
    pub Data: *const uint8,
    pub Width: uint,
    pub Height: uint,
    pub WidthB: uint,
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_3>(),
        20usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).IsAlloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(IsAlloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).WidthB as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(WidthB)
        )
    );
}
#[test]
fn bindgen_test_layout_Critter() {
    assert_eq!(
        ::std::mem::size_of::<Critter>(),
        9336usize,
        concat!("Size of: ", stringify!(Critter))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter))
    );
}
#[repr(C)]
#[repr(align(4))]
pub struct Client {
    pub _bindgen_opaque_blob: [u32; 2374usize],
}
#[test]
fn bindgen_test_layout_Client() {
    assert_eq!(
        ::std::mem::size_of::<Client>(),
        9496usize,
        concat!("Size of: ", stringify!(Client))
    );
    assert_eq!(
        ::std::mem::align_of::<Client>(),
        4usize,
        concat!("Alignment of ", stringify!(Client))
    );
}
#[repr(C)]
#[repr(align(4))]
pub struct Npc {
    pub _bindgen_opaque_blob: [u32; 2340usize],
}
#[test]
fn bindgen_test_layout_Npc() {
    assert_eq!(
        ::std::mem::size_of::<Npc>(),
        9360usize,
        concat!("Size of: ", stringify!(Npc))
    );
    assert_eq!(
        ::std::mem::align_of::<Npc>(),
        4usize,
        concat!("Alignment of ", stringify!(Npc))
    );
}
#[repr(C)]
pub struct CritterCl {
    pub Id: uint,
    pub Pid: uint16,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Dir: uint8,
    pub Params: [::std::os::raw::c_int; 1000usize],
    pub NameColor: uint,
    pub ContourColor: uint,
    pub LastHexX: Uint16Vec,
    pub LastHexY: Uint16Vec,
    pub Cond: uint8,
    pub Anim1Life: uint,
    pub Anim1Knockout: uint,
    pub Anim1Dead: uint,
    pub Anim2Life: uint,
    pub Anim2Knockout: uint,
    pub Anim2Dead: uint,
    pub Flags: uint,
    pub BaseType: uint,
    pub BaseTypeAlias: uint,
    pub ApRegenerationTick: uint,
    pub Multihex: int16,
    pub DrawEffect: *mut ::std::os::raw::c_void,
    pub Name: *const ScriptString,
    pub NameOnHead: *const ScriptString,
    pub Lexems: *const ScriptString,
    pub Avatar: *const ScriptString,
    pub InvItems: ItemVec,
    pub DefItemSlotHand: *const Item,
    pub DefItemSlotArmor: *const Item,
    pub ItemSlotMain: *const Item,
    pub ItemSlotExt: *const Item,
    pub ItemSlotArmor: *const Item,
    pub ThisPtr: [*const CritterCl; 100usize],
    pub ParamsIsChanged: [bool; 1000usize],
    pub ParamsChanged: IntVec,
    pub ParamLocked: ::std::os::raw::c_int,
    pub IsRuning: bool,
    pub MoveSteps: Uint16PairVec,
}
#[test]
fn bindgen_test_layout_CritterCl() {
    assert_eq!(
        ::std::mem::size_of::<CritterCl>(),
        5596usize,
        concat!("Size of: ", stringify!(CritterCl))
    );
    assert_eq!(
        ::std::mem::align_of::<CritterCl>(),
        4usize,
        concat!("Alignment of ", stringify!(CritterCl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).HexX as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).HexY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Dir as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Params as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).NameColor as *const _ as usize },
        4012usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(NameColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ContourColor as *const _ as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ContourColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).LastHexX as *const _ as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(LastHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).LastHexY as *const _ as usize },
        4036usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(LastHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Cond as *const _ as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim1Life as *const _ as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim1Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim1Knockout as *const _ as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim1Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim1Dead as *const _ as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim1Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim2Life as *const _ as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim2Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim2Knockout as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim2Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim2Dead as *const _ as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim2Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Flags as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).BaseType as *const _ as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(BaseType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).BaseTypeAlias as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(BaseTypeAlias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ApRegenerationTick as *const _ as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ApRegenerationTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Multihex as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Multihex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).DrawEffect as *const _ as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(DrawEffect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Name as *const _ as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).NameOnHead as *const _ as usize },
        4108usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(NameOnHead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Lexems as *const _ as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Lexems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Avatar as *const _ as usize },
        4116usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Avatar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).InvItems as *const _ as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(InvItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).DefItemSlotHand as *const _ as usize },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(DefItemSlotHand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).DefItemSlotArmor as *const _ as usize },
        4140usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(DefItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ItemSlotMain as *const _ as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ItemSlotMain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ItemSlotExt as *const _ as usize },
        4148usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ItemSlotExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ItemSlotArmor as *const _ as usize },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ThisPtr as *const _ as usize },
        4156usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ThisPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ParamsIsChanged as *const _ as usize },
        4556usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ParamsIsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ParamsChanged as *const _ as usize },
        5556usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ParamsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ParamLocked as *const _ as usize },
        5572usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ParamLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).IsRuning as *const _ as usize },
        5576usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(IsRuning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).MoveSteps as *const _ as usize },
        5580usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(MoveSteps)
        )
    );
}
