/* automatically generated by rust-bindgen */

#[allow(unused_imports)] use super::*;


#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
pub struct MapObject {
    pub MapObjType: uint8,
    pub ProtoId: uint16,
    pub MapX: uint16,
    pub MapY: uint16,
    pub UID: uint,
    pub ContainerUID: uint,
    pub ParentUID: uint,
    pub ParentChildIndex: uint,
    pub LightRGB: uint,
    pub LightDay: uint8,
    pub LightDirOff: uint8,
    pub LightDistance: uint8,
    pub LightIntensity: int8,
    pub ScriptName: [::std::os::raw::c_char; 26usize],
    pub FuncName: [::std::os::raw::c_char; 26usize],
    pub Reserved: [uint; 7usize],
    pub UserData: [::std::os::raw::c_int; 10usize],
    pub __bindgen_anon_1: MapObject__bindgen_ty_1,
}
#[repr(C)]
pub struct MapObject__bindgen_ty_1 {
    pub MCritter: __BindgenUnionField<MapObject__bindgen_ty_1__bindgen_ty_1>,
    pub MItem: __BindgenUnionField<MapObject__bindgen_ty_1__bindgen_ty_2>,
    pub MScenery: __BindgenUnionField<MapObject__bindgen_ty_1__bindgen_ty_3>,
    pub bindgen_union_field: [u32; 1003usize],
}
#[repr(C)]
pub struct MapObject__bindgen_ty_1__bindgen_ty_1 {
    pub Dir: uint8,
    pub Cond: uint8,
    pub Anim1: uint,
    pub Anim2: uint,
    pub Param: [::std::os::raw::c_int; 1000usize],
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1__bindgen_ty_1>(),
        4012usize,
        concat!(
            "Size of: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Dir as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Cond as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Cond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Anim1 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Anim1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Anim2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Anim2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Param as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Param)
        )
    );
}
#[repr(C)]
pub struct MapObject__bindgen_ty_1__bindgen_ty_2 {
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub AnimStayBegin: uint8,
    pub AnimStayEnd: uint8,
    pub AnimWait: uint16,
    pub InfoOffset: uint8,
    pub PicMapHash: uint,
    pub PicInvHash: uint,
    pub Count: uint,
    pub ItemSlot: uint8,
    pub BrokenFlags: uint8,
    pub BrokenCount: uint8,
    pub Deterioration: uint16,
    pub AmmoPid: uint16,
    pub AmmoCount: uint,
    pub LockerDoorId: uint,
    pub LockerCondition: uint16,
    pub LockerComplexity: uint16,
    pub TrapValue: int16,
    pub Val: [::std::os::raw::c_int; 10usize],
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1__bindgen_ty_2>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).OffsetX as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).OffsetY as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AnimStayBegin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AnimStayBegin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AnimStayEnd
                as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AnimStayEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AnimWait as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AnimWait)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).InfoOffset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(InfoOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).PicMapHash as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(PicMapHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).PicInvHash as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(PicInvHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).Count as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).ItemSlot as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ItemSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).BrokenFlags
                as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(BrokenFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).BrokenCount
                as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(BrokenCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).Deterioration
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Deterioration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AmmoPid as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AmmoPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AmmoCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AmmoCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).LockerDoorId
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LockerDoorId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).LockerCondition
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LockerCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).LockerComplexity
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LockerComplexity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).TrapValue as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(TrapValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).Val as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Val)
        )
    );
}
#[repr(C)]
pub struct MapObject__bindgen_ty_1__bindgen_ty_3 {
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub AnimStayBegin: uint8,
    pub AnimStayEnd: uint8,
    pub AnimWait: uint16,
    pub InfoOffset: uint8,
    pub PicMapHash: uint,
    pub PicInvHash: uint,
    pub CanUse: bool,
    pub CanTalk: bool,
    pub TriggerNum: uint,
    pub ParamsCount: uint8,
    pub Param: [::std::os::raw::c_int; 5usize],
    pub ToMapPid: uint16,
    pub ToEntire: uint,
    pub ToDir: uint8,
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1__bindgen_ty_3>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).OffsetX as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).OffsetY as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).AnimStayBegin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(AnimStayBegin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).AnimStayEnd
                as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(AnimStayEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).AnimWait as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(AnimWait)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).InfoOffset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(InfoOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).PicMapHash as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(PicMapHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).PicInvHash as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(PicInvHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).CanUse as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(CanUse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).CanTalk as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(CanTalk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).TriggerNum as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(TriggerNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ParamsCount
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ParamsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).Param as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ToMapPid as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ToMapPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ToEntire as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ToEntire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ToDir as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ToDir)
        )
    );
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1>(),
        4012usize,
        concat!("Size of: ", stringify!(MapObject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(MapObject__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1>())).MCritter as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1),
            "::",
            stringify!(MCritter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject__bindgen_ty_1>())).MItem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1),
            "::",
            stringify!(MItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1>())).MScenery as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1),
            "::",
            stringify!(MScenery)
        )
    );
}
#[test]
fn bindgen_test_layout_MapObject() {
    assert_eq!(
        ::std::mem::size_of::<MapObject>(),
        4164usize,
        concat!("Size of: ", stringify!(MapObject))
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject>(),
        4usize,
        concat!("Alignment of ", stringify!(MapObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).MapObjType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(MapObjType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ProtoId as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).MapX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(MapX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).MapY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(MapY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).UID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(UID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ContainerUID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ContainerUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ParentUID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ParentUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ParentChildIndex as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ParentChildIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightRGB as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightRGB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightDay as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightDay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightDirOff as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightDirOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightDistance as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightIntensity as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ScriptName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ScriptName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).FuncName as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(FuncName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).Reserved as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).UserData as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(UserData)
        )
    );
}
#[repr(C)]
pub struct MapEntire {
    pub Number: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Dir: uint8,
}
#[test]
fn bindgen_test_layout_MapEntire() {
    assert_eq!(
        ::std::mem::size_of::<MapEntire>(),
        12usize,
        concat!("Size of: ", stringify!(MapEntire))
    );
    assert_eq!(
        ::std::mem::align_of::<MapEntire>(),
        4usize,
        concat!("Alignment of ", stringify!(MapEntire))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).Number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(Number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).HexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).HexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).Dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(Dir)
        )
    );
}
#[repr(C)]
pub struct SceneryToClient {
    pub ProtoId: uint16,
    pub Flags: uint8,
    pub SpriteCut: uint8,
    pub MapX: uint16,
    pub MapY: uint16,
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub LightColor: uint,
    pub LightDistance: uint8,
    pub LightFlags: uint8,
    pub LightIntensity: int8,
    pub InfoOffset: uint8,
    pub AnimStayBegin: uint8,
    pub AnimStayEnd: uint8,
    pub AnimWait: uint16,
    pub PicMapHash: uint,
}
#[test]
fn bindgen_test_layout_SceneryToClient() {
    assert_eq!(
        ::std::mem::size_of::<SceneryToClient>(),
        28usize,
        concat!("Size of: ", stringify!(SceneryToClient))
    );
    assert_eq!(
        ::std::mem::align_of::<SceneryToClient>(),
        4usize,
        concat!("Alignment of ", stringify!(SceneryToClient))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).ProtoId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).Flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).SpriteCut as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(SpriteCut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).MapX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(MapX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).MapY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(MapY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).OffsetX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).OffsetY as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightColor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightDistance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightFlags as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightIntensity as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).InfoOffset as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(InfoOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).AnimStayBegin as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(AnimStayBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).AnimStayEnd as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(AnimStayEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).AnimWait as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(AnimWait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).PicMapHash as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(PicMapHash)
        )
    );
}
#[repr(C)]
pub struct ProtoMap {
    pub Header: ProtoMap__bindgen_ty_1,
    pub MObjects: MapObjectVec,
    pub LastObjectUID: uint,
    pub Tiles: ProtoMap_TileVec,
    pub WallsToSend: SceneryToClientVec,
    pub SceneriesToSend: SceneryToClientVec,
    pub HashTiles: uint,
    pub HashWalls: uint,
    pub HashScen: uint,
    pub CrittersVec: MapObjectVec,
    pub ItemsVec: MapObjectVec,
    pub SceneriesVec: MapObjectVec,
    pub GridsVec: MapObjectVec,
    pub HexFlags: *const uint8,
    pub MapEntires: EntiresVec,
    pub PathType: ::std::os::raw::c_int,
    pub Name: std_string,
    pub Pid: uint16,
}
#[repr(C)]
pub struct ProtoMap__bindgen_ty_1 {
    pub Version: uint,
    pub MaxHexX: uint16,
    pub MaxHexY: uint16,
    pub WorkHexX: ::std::os::raw::c_int,
    pub WorkHexY: ::std::os::raw::c_int,
    pub ScriptModule: [::std::os::raw::c_char; 65usize],
    pub ScriptFunc: [::std::os::raw::c_char; 65usize],
    pub Time: ::std::os::raw::c_int,
    pub NoLogOut: bool,
    pub DayTime: [::std::os::raw::c_int; 4usize],
    pub DayColor: [uint8; 12usize],
    pub HeaderSize: uint16,
    pub Packed: bool,
    pub UnpackedDataLen: uint,
}
#[test]
fn bindgen_test_layout_ProtoMap__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ProtoMap__bindgen_ty_1>(),
        192usize,
        concat!("Size of: ", stringify!(ProtoMap__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoMap__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoMap__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).Version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).MaxHexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(MaxHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).MaxHexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(MaxHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).WorkHexX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(WorkHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).WorkHexY as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(WorkHexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).ScriptModule as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(ScriptModule)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).ScriptFunc as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(ScriptFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).Time as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).NoLogOut as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(NoLogOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).DayTime as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(DayTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).DayColor as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(DayColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).HeaderSize as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(HeaderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).Packed as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(Packed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).UnpackedDataLen as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(UnpackedDataLen)
        )
    );
}
#[repr(C)]
pub struct ProtoMap_Tile {
    pub NameHash: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub OffsX: int16,
    pub OffsY: int16,
    pub Layer: uint8,
    pub IsRoof: bool,
}
#[test]
fn bindgen_test_layout_ProtoMap_Tile() {
    assert_eq!(
        ::std::mem::size_of::<ProtoMap_Tile>(),
        16usize,
        concat!("Size of: ", stringify!(ProtoMap_Tile))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoMap_Tile>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoMap_Tile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).NameHash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(NameHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).HexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).HexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).OffsX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(OffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).OffsY as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(OffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).Layer as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(Layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).IsRoof as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(IsRoof)
        )
    );
}
#[test]
fn bindgen_test_layout_ProtoMap() {
    assert_eq!(
        ::std::mem::size_of::<ProtoMap>(),
        392usize,
        concat!("Size of: ", stringify!(ProtoMap))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoMap>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoMap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).MObjects as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(MObjects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).LastObjectUID as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(LastObjectUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Tiles as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Tiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).WallsToSend as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(WallsToSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).SceneriesToSend as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(SceneriesToSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).HashTiles as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(HashTiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).HashWalls as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(HashWalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).HashScen as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(HashScen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).CrittersVec as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(CrittersVec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).ItemsVec as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(ItemsVec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).SceneriesVec as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(SceneriesVec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).GridsVec as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(GridsVec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).HexFlags as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(HexFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).MapEntires as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(MapEntires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).PathType as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(PathType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Name as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Pid as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Pid)
        )
    );
}
#[repr(C)]
pub struct Map {
    pub Sync: SyncObj,
    pub DataLocker: Mutex,
    pub HexFlags: *const uint8,
    pub MapCritters: CrVec,
    pub MapPlayers: ClVec,
    pub MapNpcs: PcVec,
    pub HexItems: ItemVec,
    pub MapLocation: *const Location,
    pub Data: Map__bindgen_ty_1,
    pub Proto: *const ProtoMap,
    pub NeedProcess: bool,
    pub FuncId: [::std::os::raw::c_int; 12usize],
    pub LoopEnabled: [uint; 5usize],
    pub LoopLastTick: [uint; 5usize],
    pub LoopWaitTick: [uint; 5usize],
    pub IsTurnBasedOn: bool,
    pub TurnBasedEndTick: uint,
    pub TurnSequenceCur: ::std::os::raw::c_int,
    pub TurnSequence: UintVec,
    pub IsTurnBasedTimeout: bool,
    pub TurnBasedBeginSecond: uint,
    pub NeedEndTurnBased: bool,
    pub TurnBasedRound: uint,
    pub TurnBasedTurn: uint,
    pub TurnBasedWholeTurn: uint,
    pub IsNotValid: bool,
    pub RefCounter: int16,
}
#[repr(C)]
pub struct Map__bindgen_ty_1 {
    pub MapId: uint,
    pub MapPid: uint16,
    pub MapRain: uint8,
    pub IsTurnBasedAviable: bool,
    pub MapTime: ::std::os::raw::c_int,
    pub ScriptId: uint,
    pub MapDayTime: [::std::os::raw::c_int; 4usize],
    pub MapDayColor: [uint8; 12usize],
    pub Reserved: [uint; 20usize],
    pub UserData: [::std::os::raw::c_int; 100usize],
}
#[test]
fn bindgen_test_layout_Map__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Map__bindgen_ty_1>(),
        524usize,
        concat!("Size of: ", stringify!(Map__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Map__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Map__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapPid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapRain as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapRain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Map__bindgen_ty_1>())).IsTurnBasedAviable as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(IsTurnBasedAviable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).ScriptId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(ScriptId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapDayTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapDayTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapDayColor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapDayColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).Reserved as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).UserData as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(UserData)
        )
    );
}
#[test]
fn bindgen_test_layout_Map() {
    assert_eq!(
        ::std::mem::size_of::<Map>(),
        816usize,
        concat!("Size of: ", stringify!(Map))
    );
    assert_eq!(
        ::std::mem::align_of::<Map>(),
        4usize,
        concat!("Alignment of ", stringify!(Map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).Sync as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Map), "::", stringify!(Sync))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).DataLocker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(DataLocker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).HexFlags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(HexFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapCritters as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapCritters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapPlayers as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapPlayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapNpcs as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapNpcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).HexItems as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(HexItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapLocation as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapLocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).Data as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(Map), "::", stringify!(Data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).Proto as *const _ as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(Proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).NeedProcess as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(NeedProcess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).FuncId as *const _ as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(FuncId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).LoopEnabled as *const _ as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(LoopEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).LoopLastTick as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(LoopLastTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).LoopWaitTick as *const _ as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(LoopWaitTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).IsTurnBasedOn as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(IsTurnBasedOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedEndTick as *const _ as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedEndTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnSequenceCur as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnSequenceCur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnSequence as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnSequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).IsTurnBasedTimeout as *const _ as usize },
        788usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(IsTurnBasedTimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedBeginSecond as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedBeginSecond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).NeedEndTurnBased as *const _ as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(NeedEndTurnBased)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedRound as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedRound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedTurn as *const _ as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedTurn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedWholeTurn as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedWholeTurn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).IsNotValid as *const _ as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(IsNotValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).RefCounter as *const _ as usize },
        814usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(RefCounter)
        )
    );
}
#[repr(C)]
pub struct ProtoLocation {
    pub IsInit: bool,
    pub LocPid: uint16,
    pub Name: std_string,
    pub MaxPlayers: uint,
    pub ProtoMapPids: Uint16Vec,
    pub AutomapsPids: Uint16Vec,
    pub Entrance: UintPairVec,
    pub ScriptBindId: ::std::os::raw::c_int,
    pub Radius: uint16,
    pub Visible: bool,
    pub AutoGarbage: bool,
    pub GeckVisible: bool,
}
#[test]
fn bindgen_test_layout_ProtoLocation() {
    assert_eq!(
        ::std::mem::size_of::<ProtoLocation>(),
        96usize,
        concat!("Size of: ", stringify!(ProtoLocation))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoLocation>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoLocation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).IsInit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(IsInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).LocPid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(LocPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).MaxPlayers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(MaxPlayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).ProtoMapPids as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(ProtoMapPids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).AutomapsPids as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(AutomapsPids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Entrance as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Entrance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).ScriptBindId as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(ScriptBindId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Radius as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Visible as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).AutoGarbage as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(AutoGarbage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).GeckVisible as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(GeckVisible)
        )
    );
}
#[repr(C)]
pub struct Location {
    pub Sync: SyncObj,
    pub LocMaps: MapVec,
    pub Data: Location__bindgen_ty_1,
    pub Proto: *const ProtoLocation,
    pub GeckCount: ::std::os::raw::c_int,
    pub FuncId: [::std::os::raw::c_int; 2usize],
    pub IsNotValid: bool,
    pub RefCounter: int16,
}
#[repr(C)]
pub struct Location__bindgen_ty_1 {
    pub LocId: uint,
    pub LocPid: uint16,
    pub WX: uint16,
    pub WY: uint16,
    pub Radius: uint16,
    pub Visible: bool,
    pub GeckVisible: bool,
    pub AutoGarbage: bool,
    pub ToGarbage: bool,
    pub Color: uint,
    pub Reserved3: [uint; 59usize],
}
#[test]
fn bindgen_test_layout_Location__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Location__bindgen_ty_1>(),
        256usize,
        concat!("Size of: ", stringify!(Location__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Location__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Location__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).LocId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(LocId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).LocPid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(LocPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).WX as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(WX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).WY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(WY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Radius as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Visible as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).GeckVisible as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(GeckVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).AutoGarbage as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(AutoGarbage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).ToGarbage as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(ToGarbage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Reserved3 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Reserved3)
        )
    );
}
#[test]
fn bindgen_test_layout_Location() {
    assert_eq!(
        ::std::mem::size_of::<Location>(),
        296usize,
        concat!("Size of: ", stringify!(Location))
    );
    assert_eq!(
        ::std::mem::align_of::<Location>(),
        4usize,
        concat!("Alignment of ", stringify!(Location))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).Sync as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(Sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).LocMaps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(LocMaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).Data as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).Proto as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(Proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).GeckCount as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(GeckCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).FuncId as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(FuncId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).IsNotValid as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(IsNotValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).RefCounter as *const _ as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(RefCounter)
        )
    );
}
