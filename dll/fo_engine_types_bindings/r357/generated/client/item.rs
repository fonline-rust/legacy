/* automatically generated by rust-bindgen */

#[allow(unused_imports)] use super::*;


#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
pub struct ProtoItem {
    pub ProtoId: uint16,
    pub Type: ::std::os::raw::c_int,
    pub PicMap: uint,
    pub PicInv: uint,
    pub Flags: uint,
    pub Stackable: bool,
    pub Deteriorable: bool,
    pub GroundLevel: bool,
    pub Corner: ::std::os::raw::c_int,
    pub Dir: ::std::os::raw::c_int,
    pub Slot: uint8,
    pub Weight: uint,
    pub Volume: uint,
    pub Cost: uint,
    pub StartCount: uint,
    pub SoundId: uint8,
    pub Material: uint8,
    pub LightFlags: uint8,
    pub LightDistance: uint8,
    pub LightIntensity: int8,
    pub LightColor: uint,
    pub DisableEgg: bool,
    pub AnimWaitBase: uint16,
    pub AnimWaitRndMin: uint16,
    pub AnimWaitRndMax: uint16,
    pub AnimStay: [uint8; 2usize],
    pub AnimShow: [uint8; 2usize],
    pub AnimHide: [uint8; 2usize],
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub SpriteCut: uint8,
    pub DrawOrderOffsetHexY: int8,
    pub RadioChannel: uint16,
    pub RadioFlags: uint16,
    pub RadioBroadcastSend: uint8,
    pub RadioBroadcastRecv: uint8,
    pub IndicatorStart: uint8,
    pub IndicatorMax: uint8,
    pub HolodiskNum: uint,
    pub StartValue: [::std::os::raw::c_int; 10usize],
    pub BlockLines: [uint8; 50usize],
    pub ChildPids: [uint16; 5usize],
    pub ChildLines: [[uint8; 6usize]; 5usize],
    pub MagicPower: ::std::os::raw::c_int,
    pub Unused: [uint8; 96usize],
    pub Armor_CrTypeMale: uint,
    pub Armor_CrTypeFemale: uint,
    pub Armor_AC: ::std::os::raw::c_int,
    pub Armor_Perk: uint,
    pub Armor_DRNormal: ::std::os::raw::c_int,
    pub Armor_DRLaser: ::std::os::raw::c_int,
    pub Armor_DRFire: ::std::os::raw::c_int,
    pub Armor_DRPlasma: ::std::os::raw::c_int,
    pub Armor_DRElectr: ::std::os::raw::c_int,
    pub Armor_DREmp: ::std::os::raw::c_int,
    pub Armor_DRExplode: ::std::os::raw::c_int,
    pub Armor_DTNormal: ::std::os::raw::c_int,
    pub Armor_DTLaser: ::std::os::raw::c_int,
    pub Armor_DTFire: ::std::os::raw::c_int,
    pub Armor_DTPlasma: ::std::os::raw::c_int,
    pub Armor_DTElectr: ::std::os::raw::c_int,
    pub Armor_DTEmp: ::std::os::raw::c_int,
    pub Armor_DTExplode: ::std::os::raw::c_int,
    pub Armor_Unused: [uint8; 28usize],
    pub Weapon_DmgType: [::std::os::raw::c_int; 3usize],
    pub Weapon_Anim2: [uint; 3usize],
    pub Weapon_DmgMin: [::std::os::raw::c_int; 3usize],
    pub Weapon_DmgMax: [::std::os::raw::c_int; 3usize],
    pub Weapon_Effect: [uint16; 3usize],
    pub Weapon_Remove: [bool; 3usize],
    pub Weapon_ReloadAp: uint,
    pub Weapon_UnarmedCriticalBonus: ::std::os::raw::c_int,
    pub Weapon_CriticalFailture: uint,
    pub Weapon_UnarmedArmorPiercing: bool,
    pub Weapon_Unused: [uint8; 27usize],
    pub Ammo_AcMod: ::std::os::raw::c_int,
    pub Ammo_DrMod: ::std::os::raw::c_int,
    pub Ammo_DmgMult: uint,
    pub Ammo_DmgDiv: uint,
    pub UnusedEnd: [uint8; 184usize],
    pub Weapon_IsUnarmed: bool,
    pub Weapon_UnarmedTree: ::std::os::raw::c_int,
    pub Weapon_UnarmedPriority: ::std::os::raw::c_int,
    pub Weapon_UnarmedMinAgility: ::std::os::raw::c_int,
    pub Weapon_UnarmedMinUnarmed: ::std::os::raw::c_int,
    pub Weapon_UnarmedMinLevel: ::std::os::raw::c_int,
    pub Weapon_Anim1: uint,
    pub Weapon_MaxAmmoCount: uint,
    pub Weapon_Caliber: ::std::os::raw::c_int,
    pub Weapon_DefaultAmmoPid: uint16,
    pub Weapon_MinStrength: ::std::os::raw::c_int,
    pub Weapon_Perk: ::std::os::raw::c_int,
    pub Weapon_ActiveUses: uint,
    pub Weapon_Skill: [::std::os::raw::c_int; 3usize],
    pub Weapon_PicUse: [uint; 3usize],
    pub Weapon_MaxDist: [uint; 3usize],
    pub Weapon_Round: [uint; 3usize],
    pub Weapon_ApCost: [uint; 3usize],
    pub Weapon_Aim: [bool; 3usize],
    pub Weapon_SoundId: [uint8; 3usize],
    pub Ammo_Caliber: ::std::os::raw::c_int,
    pub Door_NoBlockMove: bool,
    pub Door_NoBlockShoot: bool,
    pub Door_NoBlockLight: bool,
    pub Container_Volume: uint,
    pub Container_CannotPickUp: bool,
    pub Container_MagicHandsGrnd: bool,
    pub Container_Changeble: bool,
    pub Locker_Condition: uint16,
    pub Grid_Type: ::std::os::raw::c_int,
    pub Car_Speed: uint,
    pub Car_Passability: uint,
    pub Car_DeteriorationRate: uint,
    pub Car_CrittersCapacity: uint,
    pub Car_TankVolume: uint,
    pub Car_MaxDeterioration: uint,
    pub Car_FuelConsumption: uint,
    pub Car_Entrance: uint,
    pub Car_MovementType: uint,
}
#[test]
fn bindgen_test_layout_ProtoItem() {
    assert_eq!(
        ::std::mem::size_of::<ProtoItem>(),
        908usize,
        concat!("Size of: ", stringify!(ProtoItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).ProtoId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).PicMap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(PicMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).PicInv as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(PicInv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Stackable as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Stackable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Deteriorable as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Deteriorable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).GroundLevel as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(GroundLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Corner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Corner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Dir as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Slot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weight as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Volume as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Cost as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).StartCount as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(StartCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).SoundId as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(SoundId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Material as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Material)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightFlags as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightDistance as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightIntensity as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightColor as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).DisableEgg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(DisableEgg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimWaitBase as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimWaitBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimWaitRndMin as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimWaitRndMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimWaitRndMax as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimWaitRndMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimStay as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimStay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimShow as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimShow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimHide as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimHide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).OffsetX as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).OffsetY as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).SpriteCut as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(SpriteCut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).DrawOrderOffsetHexY as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(DrawOrderOffsetHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioChannel as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioFlags as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioBroadcastSend as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioBroadcastSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioBroadcastRecv as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioBroadcastRecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).IndicatorStart as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(IndicatorStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).IndicatorMax as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(IndicatorMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).HolodiskNum as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(HolodiskNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).StartValue as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(StartValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).BlockLines as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(BlockLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).ChildPids as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(ChildPids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).ChildLines as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(ChildLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).MagicPower as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(MagicPower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Unused as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_CrTypeMale as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_CrTypeMale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_CrTypeFemale as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_CrTypeFemale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_AC as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_AC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_Perk as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_Perk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRNormal as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRNormal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRLaser as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRLaser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRFire as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRFire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRPlasma as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRPlasma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRElectr as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRElectr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DREmp as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DREmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRExplode as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRExplode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTNormal as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTNormal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTLaser as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTLaser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTFire as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTFire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTPlasma as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTPlasma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTElectr as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTElectr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTEmp as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTEmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTExplode as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTExplode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_Unused as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_Unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DmgType as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DmgType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Anim2 as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Anim2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DmgMin as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DmgMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DmgMax as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DmgMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Effect as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Effect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Remove as *const _ as usize },
        482usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_ReloadAp as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_ReloadAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedCriticalBonus as *const _ as usize
        },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedCriticalBonus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_CriticalFailture as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_CriticalFailture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedArmorPiercing as *const _ as usize
        },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedArmorPiercing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Unused as *const _ as usize },
        501usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_AcMod as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_AcMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_DrMod as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_DrMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_DmgMult as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_DmgMult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_DmgDiv as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_DmgDiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).UnusedEnd as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(UnusedEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_IsUnarmed as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_IsUnarmed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedTree as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedTree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedPriority as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedPriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedMinAgility as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedMinAgility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedMinUnarmed as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedMinUnarmed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedMinLevel as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedMinLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Anim1 as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Anim1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_MaxAmmoCount as *const _ as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_MaxAmmoCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Caliber as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Caliber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DefaultAmmoPid as *const _ as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DefaultAmmoPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_MinStrength as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_MinStrength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Perk as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Perk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_ActiveUses as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_ActiveUses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Skill as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Skill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_PicUse as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_PicUse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_MaxDist as *const _ as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_MaxDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Round as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Round)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_ApCost as *const _ as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_ApCost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Aim as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Aim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_SoundId as *const _ as usize },
        843usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_SoundId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_Caliber as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_Caliber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Door_NoBlockMove as *const _ as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Door_NoBlockMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Door_NoBlockShoot as *const _ as usize },
        853usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Door_NoBlockShoot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Door_NoBlockLight as *const _ as usize },
        854usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Door_NoBlockLight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Container_Volume as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Container_CannotPickUp as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_CannotPickUp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Container_MagicHandsGrnd as *const _ as usize
        },
        861usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_MagicHandsGrnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Container_Changeble as *const _ as usize },
        862usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_Changeble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Locker_Condition as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Locker_Condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Grid_Type as *const _ as usize },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Grid_Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_Speed as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_Speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_Passability as *const _ as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_Passability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_DeteriorationRate as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_DeteriorationRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_CrittersCapacity as *const _ as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_CrittersCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_TankVolume as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_TankVolume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_MaxDeterioration as *const _ as usize },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_MaxDeterioration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_FuelConsumption as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_FuelConsumption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_Entrance as *const _ as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_Entrance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_MovementType as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_MovementType)
        )
    );
}
#[repr(C)]
pub struct Item {
    pub Id: uint,
    pub Proto: *const ProtoItem,
    pub From: ::std::os::raw::c_int,
    pub Accessory: uint8,
    pub ViewPlaceOnMap: bool,
    pub Reserved0: int16,
    pub __bindgen_anon_1: Item__bindgen_ty_1,
    pub Data: Item__Data,
    pub RefCounter: int16,
    pub IsNotValid: bool,
    pub Lexems: ScriptString,
}
#[repr(C)]
pub struct Item__bindgen_ty_1 {
    pub AccHex: __BindgenUnionField<Item__bindgen_ty_1__bindgen_ty_1>,
    pub AccCritter: __BindgenUnionField<Item__bindgen_ty_1__bindgen_ty_2>,
    pub AccContainer: __BindgenUnionField<Item__bindgen_ty_1__bindgen_ty_3>,
    pub AccBuffer: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub bindgen_union_field: [u32; 2usize],
}
#[repr(C)]
pub struct Item__bindgen_ty_1__bindgen_ty_1 {
    pub MapId: uint,
    pub HexX: uint16,
    pub HexY: uint16,
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_1>())).MapId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(MapId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_1>())).HexX as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_1>())).HexY as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(HexY)
        )
    );
}
#[repr(C)]
pub struct Item__bindgen_ty_1__bindgen_ty_2 {
    pub Id: uint,
    pub Slot: uint8,
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_2>())).Id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_2>())).Slot as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Slot)
        )
    );
}
#[repr(C)]
pub struct Item__bindgen_ty_1__bindgen_ty_3 {
    pub ContainerId: uint,
    pub StackId: uint,
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_3>())).ContainerId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ContainerId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_3>())).StackId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(StackId)
        )
    );
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Item__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccHex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccHex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccCritter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccCritter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccContainer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccContainer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccBuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccBuffer)
        )
    );
}
#[repr(C)]
pub struct Item__Data {
    pub SortValue: uint16,
    pub Info: uint8,
    pub Indicator: uint8,
    pub PicMapHash: uint,
    pub PicInvHash: uint,
    pub AnimWaitBase: uint16,
    pub AnimStay: [uint8; 2usize],
    pub AnimShow: [uint8; 2usize],
    pub AnimHide: [uint8; 2usize],
    pub Flags: uint,
    pub Rate: uint8,
    pub LightIntensity: int8,
    pub LightDistance: uint8,
    pub LightFlags: uint8,
    pub LightColor: uint,
    pub ScriptId: uint16,
    pub TrapValue: int16,
    pub Count: uint,
    pub Cost: uint,
    pub ScriptValues: [::std::os::raw::c_int; 10usize],
    pub BrokenFlags: uint8,
    pub BrokenCount: uint8,
    pub Deterioration: uint16,
    pub AmmoPid: uint16,
    pub AmmoCount: uint16,
    pub LockerId: uint,
    pub LockerCondition: uint16,
    pub LockerComplexity: uint16,
    pub HolodiskNumber: uint,
    pub RadioChannel: uint16,
    pub RadioFlags: uint16,
    pub RadioBroadcastSend: uint8,
    pub RadioBroadcastRecv: uint8,
    pub Charge: uint16,
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub Dir: int16,
    pub Reserved: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_Item__Data() {
    assert_eq!(
        ::std::mem::size_of::<Item__Data>(),
        120usize,
        concat!("Size of: ", stringify!(Item__Data))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__Data>(),
        4usize,
        concat!("Alignment of ", stringify!(Item__Data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).SortValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(SortValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Info as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Indicator as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Indicator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).PicMapHash as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(PicMapHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).PicInvHash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(PicInvHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimWaitBase as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimWaitBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimStay as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimStay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimShow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimShow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimHide as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimHide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Rate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightIntensity as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightDistance as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightFlags as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightColor as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).ScriptId as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(ScriptId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).TrapValue as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(TrapValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Count as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Cost as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).ScriptValues as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(ScriptValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).BrokenFlags as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(BrokenFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).BrokenCount as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(BrokenCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Deterioration as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Deterioration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AmmoPid as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AmmoPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AmmoCount as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AmmoCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LockerId as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LockerId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LockerCondition as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LockerCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LockerComplexity as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LockerComplexity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).HolodiskNumber as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(HolodiskNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioChannel as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioFlags as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioBroadcastSend as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioBroadcastSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioBroadcastRecv as *const _ as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioBroadcastRecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Charge as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Charge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).OffsetX as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).OffsetY as *const _ as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Dir as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Reserved as *const _ as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_Item() {
    assert_eq!(
        ::std::mem::size_of::<Item>(),
        180usize,
        concat!("Size of: ", stringify!(Item))
    );
    assert_eq!(
        ::std::mem::align_of::<Item>(),
        4usize,
        concat!("Alignment of ", stringify!(Item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Item), "::", stringify!(Id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Proto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).From as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(From)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Accessory as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Accessory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).ViewPlaceOnMap as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(ViewPlaceOnMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Reserved0 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).RefCounter as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(RefCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).IsNotValid as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(IsNotValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Lexems as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Lexems)
        )
    );
}
